// Code generated by MockGen. DO NOT EDIT.
// Source: vk_film/internal/usecase/auth (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -destination=mocks/manager.go -package=mu -mock_names=Manager=SessionManager . Manager
//

// Package mu is a generated GoMock package.
package mu

import (
	reflect "reflect"
	user "vk_film/internal/repository/user"

	gomock "go.uber.org/mock/gomock"
)

// SessionManager is a mock of Manager interface.
type SessionManager struct {
	ctrl     *gomock.Controller
	recorder *SessionManagerMockRecorder
}

// SessionManagerMockRecorder is the mock recorder for SessionManager.
type SessionManagerMockRecorder struct {
	mock *SessionManager
}

// NewSessionManager creates a new mock instance.
func NewSessionManager(ctrl *gomock.Controller) *SessionManager {
	mock := &SessionManager{ctrl: ctrl}
	mock.recorder = &SessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SessionManager) EXPECT() *SessionManagerMockRecorder {
	return m.recorder
}

// GetUserId mocks base method.
func (m *SessionManager) GetUserId(arg0 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserId", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserId indicates an expected call of GetUserId.
func (mr *SessionManagerMockRecorder) GetUserId(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserId", reflect.TypeOf((*SessionManager)(nil).GetUserId), arg0)
}

// Login mocks base method.
func (m *SessionManager) Login(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *SessionManagerMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*SessionManager)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *SessionManager) Logout(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *SessionManagerMockRecorder) Logout(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*SessionManager)(nil).Logout), arg0)
}
