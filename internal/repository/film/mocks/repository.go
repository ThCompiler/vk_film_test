// Code generated by MockGen. DO NOT EDIT.
// Source: vk_film/internal/repository/film (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository.go -package=mr -mock_names=Repository=FilmRepository . Repository
//

// Package mr is a generated GoMock package.
package mr

import (
	reflect "reflect"
	types "vk_film/internal/pkg/types"
	film "vk_film/internal/repository/film"

	gomock "go.uber.org/mock/gomock"
)

// FilmRepository is a mock of Repository interface.
type FilmRepository struct {
	ctrl     *gomock.Controller
	recorder *FilmRepositoryMockRecorder
}

// FilmRepositoryMockRecorder is the mock recorder for FilmRepository.
type FilmRepositoryMockRecorder struct {
	mock *FilmRepository
}

// NewFilmRepository creates a new mock instance.
func NewFilmRepository(ctrl *gomock.Controller) *FilmRepository {
	mock := &FilmRepository{ctrl: ctrl}
	mock.recorder = &FilmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FilmRepository) EXPECT() *FilmRepositoryMockRecorder {
	return m.recorder
}

// CreateFilm mocks base method.
func (m *FilmRepository) CreateFilm(arg0 *film.Film, arg1 []types.Id) (*film.FilmWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", arg0, arg1)
	ret0, _ := ret[0].(*film.FilmWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *FilmRepositoryMockRecorder) CreateFilm(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*FilmRepository)(nil).CreateFilm), arg0, arg1)
}

// DeleteFilm mocks base method.
func (m *FilmRepository) DeleteFilm(arg0 types.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *FilmRepositoryMockRecorder) DeleteFilm(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*FilmRepository)(nil).DeleteFilm), arg0)
}

// GetFilms mocks base method.
func (m *FilmRepository) GetFilms(arg0 film.Params) ([]film.FilmWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", arg0)
	ret0, _ := ret[0].([]film.FilmWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *FilmRepositoryMockRecorder) GetFilms(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*FilmRepository)(nil).GetFilms), arg0)
}

// UpdateFilm mocks base method.
func (m *FilmRepository) UpdateFilm(arg0 *film.UpdateFilm) (*film.FilmWithActors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", arg0)
	ret0, _ := ret[0].(*film.FilmWithActors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *FilmRepositoryMockRecorder) UpdateFilm(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*FilmRepository)(nil).UpdateFilm), arg0)
}
