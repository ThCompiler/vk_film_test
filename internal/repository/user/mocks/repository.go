// Code generated by MockGen. DO NOT EDIT.
// Source: vk_film/internal/repository/user (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository.go -package=mr -mock_names=Repository=UserRepository . Repository
//

// Package mr is a generated GoMock package.
package mr

import (
	reflect "reflect"
	types "vk_film/internal/pkg/types"
	user "vk_film/internal/repository/user"

	gomock "go.uber.org/mock/gomock"
)

// UserRepository is a mock of Repository interface.
type UserRepository struct {
	ctrl     *gomock.Controller
	recorder *UserRepositoryMockRecorder
}

// UserRepositoryMockRecorder is the mock recorder for UserRepository.
type UserRepositoryMockRecorder struct {
	mock *UserRepository
}

// NewUserRepository creates a new mock instance.
func NewUserRepository(ctrl *gomock.Controller) *UserRepository {
	mock := &UserRepository{ctrl: ctrl}
	mock.recorder = &UserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *UserRepository) EXPECT() *UserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *UserRepository) CreateUser(arg0 *user.User) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *UserRepositoryMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*UserRepository)(nil).CreateUser), arg0)
}

// DeleteUser mocks base method.
func (m *UserRepository) DeleteUser(arg0 types.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *UserRepositoryMockRecorder) DeleteUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*UserRepository)(nil).DeleteUser), arg0)
}

// GetPasswordByLogin mocks base method.
func (m *UserRepository) GetPasswordByLogin(arg0 string) (*user.LoginUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordByLogin", arg0)
	ret0, _ := ret[0].(*user.LoginUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPasswordByLogin indicates an expected call of GetPasswordByLogin.
func (mr *UserRepositoryMockRecorder) GetPasswordByLogin(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordByLogin", reflect.TypeOf((*UserRepository)(nil).GetPasswordByLogin), arg0)
}

// GetUserById mocks base method.
func (m *UserRepository) GetUserById(arg0 types.Id) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *UserRepositoryMockRecorder) GetUserById(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*UserRepository)(nil).GetUserById), arg0)
}

// GetUsers mocks base method.
func (m *UserRepository) GetUsers() ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *UserRepositoryMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*UserRepository)(nil).GetUsers))
}

// UpdateUserRole mocks base method.
func (m *UserRepository) UpdateUserRole(arg0 *user.User) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *UserRepositoryMockRecorder) UpdateUserRole(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*UserRepository)(nil).UpdateUserRole), arg0)
}
