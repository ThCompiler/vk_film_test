// Code generated by MockGen. DO NOT EDIT.
// Source: vk_film/internal/repository/actor (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository.go -package=mr -mock_names=Repository=ActorRepository . Repository
//

// Package mr is a generated GoMock package.
package mr

import (
	reflect "reflect"
	types "vk_film/internal/pkg/types"
	actor "vk_film/internal/repository/actor"

	gomock "go.uber.org/mock/gomock"
)

// ActorRepository is a mock of Repository interface.
type ActorRepository struct {
	ctrl     *gomock.Controller
	recorder *ActorRepositoryMockRecorder
}

// ActorRepositoryMockRecorder is the mock recorder for ActorRepository.
type ActorRepositoryMockRecorder struct {
	mock *ActorRepository
}

// NewActorRepository creates a new mock instance.
func NewActorRepository(ctrl *gomock.Controller) *ActorRepository {
	mock := &ActorRepository{ctrl: ctrl}
	mock.recorder = &ActorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ActorRepository) EXPECT() *ActorRepositoryMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *ActorRepository) CreateActor(arg0 *actor.Actor) (*actor.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", arg0)
	ret0, _ := ret[0].(*actor.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *ActorRepositoryMockRecorder) CreateActor(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*ActorRepository)(nil).CreateActor), arg0)
}

// DeleteActor mocks base method.
func (m *ActorRepository) DeleteActor(arg0 types.Id) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *ActorRepositoryMockRecorder) DeleteActor(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*ActorRepository)(nil).DeleteActor), arg0)
}

// GetActors mocks base method.
func (m *ActorRepository) GetActors() ([]actor.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors")
	ret0, _ := ret[0].([]actor.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *ActorRepositoryMockRecorder) GetActors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*ActorRepository)(nil).GetActors))
}

// UpdateActor mocks base method.
func (m *ActorRepository) UpdateActor(arg0 *actor.UpdateActor) (*actor.ActorWithFilms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", arg0)
	ret0, _ := ret[0].(*actor.ActorWithFilms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *ActorRepositoryMockRecorder) UpdateActor(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*ActorRepository)(nil).UpdateActor), arg0)
}
